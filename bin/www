#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('letvote-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Pkg map argv to command
 */
const { exec } = require('child_process')
let arg = process.argv.slice(2)

const pkgapi = async function (arg) {
  switch (arg) {
    case 'test':
      exec('npm run test', (err, stdout, stderr) => {
        console.log('\x1b[36m%s', `${stdout}`);
        process.exit(0)
      })
      break;
    case 'migrate':
      exec(`node_modules/sequelize-cli/lib/sequelize db:migrate`, (err, stdout, stderr) => {
        console.log(`${stdout}`);
        process.exit(0)
      })
      break;
    case 'npm':
      break;
    default:
      console.log('letvotebackend [command]\n\n  [command]\t\t[description]\n  test\t\t\tRun unit test\n  migrate\t\tRun pending migration')
      if (arg != '-h' || arg != '--help') console.log('not found command', `'${arg}'`)
      process.exit(0)
      break;
  }
}
if (arg.length != 0) {
  pkgapi(arg[0])
}
